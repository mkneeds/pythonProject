from pyomo.environ import *
import random

# Создание модели
model = ConcreteModel()
model.name = 'MTP'
solver = SolverFactory('cbc', executable="D:\\cbc\\bin\\cbc.exe")

# Определение индексных множеств
model.i = Set(initialize=['r101','r102','r103','r104','r105','r106','r107','r108','r109','r110','r111','r201','r202','r203','r205','r206','r207','r208','r209','r210','r212','r213','r401','r402','r403','r404','r405','r406','r407','r409','r410','r501','r502','r503','r504','r505','r506','r507','r508','r509','r510','r601','r602','r603','r604','r605','r606','r607','r608','r609','r610','r611','r612','r701','r702','r703','r704','r705','r706','r707','r708','r801','r802','r803','r804','r805','r806','r807','r808','r901','r902','r903','r904','r905','r907','r908','r909'])  # механизированная работа
model.j = Set(initialize=['t1','t2','t3','t7','t10','t11','t14'])  # марка трактора
model.k = Set(initialize=['m0','m2','m4','m6','m7','m8','m9','m15','m17','m18','m24','m25','m26','m27','m29','m31'])  # марка орудия
model.t = Set(initialize=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])  # период



# Определение управляемого параметра

model.x = Var(model.i, model.j, model.k, model.t, within=NonNegativeIntegers)


# установка начальных значений для переменных

V = {
'r101': 2400,
'r102': 1200,
'r103': 1200,
'r104': 1200,
'r105': 1200,
'r106': 1200,
'r107': 1200,
'r108': 500,
'r109': 2214,
'r110': 900,
'r111': 1800,
'r201': 4300,
'r202': 4300,
'r203': 8600,
'r205': 4300,
'r206': 4300,
'r207': 4300,
'r208': 4300,
'r209': 4300,
'r210': 12900,
'r212': 11610,
'r213': 10750,
'r401': 1000,
'r402': 4000,
'r403': 2000,
'r404': 1000,
'r405': 1000,
'r406': 1000,
'r407': 2000,
'r409': 1000,
'r410': 2890,
'r501': 27740,
'r502': 27740,
'r503': 1387,
'r504': 2774,
'r505': 1387,
'r506': 1387,
'r507': 1387,
'r508': 1387,
'r509': 20545,
'r510': 20545,
'r601': 2600,
'r602': 1300,
'r603': 78000,
'r604': 1300,
'r605': 1300,
'r606': 1300,
'r607': 1300,
'r608': 1300,
'r609': 1300,
'r610': 1300,
'r611': 1300,
'r612': 20800,
'r701': 800,
'r702': 1600,
'r703': 800,
'r704': 800,
'r705': 800,
'r706': 2400,
'r707': 800,
'r708': 1336,
'r801': 700,
'r802': 280,
'r803': 1400,
'r804': 800,
'r805': 800,
'r806': 800,
'r807': 2400,
'r808': 800,

'r901': 1661,
'r902': 5933,
'r903': 3000,
'r904': 3000,
'r905': 72000,
'r907': 3000,
'r908': 3000,
'r909': 3000
}
L = {
    't1': 1,
    't2': 10,
    't3': 15,
    't7': 10,
    't10': 8,
    't11': 41,
    't14': 11
}

R = {
    'm0': 777,
    'm2': 7,
    'm4': 13,
    'm6': 2,
    'm7': 8,
    'm8': 13,
    'm9': 11,
    'm15': 5,
    'm17': 12,
    'm18': 7,
    'm24': 3,
    'm25': 3,
    'm26': 6,
    'm27': 7,
    'm29': 2,
    'm31': 18
}
for key in L:
    L[key] *= 1000000
for key in R:
    R[key] *= 10000
p = {
    ('r101', 't11', 'm27', 19): 22.5,
    ('r101', 't11', 'm27', 20): 22.5,
    ('r102', 't14', 'm4', 21): 11,
    ('r102', 't14', 'm4', 22): 11,
    ('r103', 't10', 'm17', 22): 5,
    ('r103', 't14', 'm18', 22): 11,
    ('r103', 't10', 'm17', 23): 5,
    ('r103', 't14', 'm18', 23): 11,
    ('r104', 't11', 'm9', 4): 25,
    ('r104', 't11', 'm9', 5): 25,
    ('r105', 't11', 'm7', 4): 9,
    ('r105', 't10', 'm7', 4): 11,
    ('r105', 't10', 'm6', 4): 8,
    ('r105', 't11', 'm7', 5): 9,
    ('r105', 't10', 'm7', 5): 11,
    ('r105', 't10', 'm6', 5): 8,
    ('r106', 't11', 'm24', 4): 18,
    ('r106', 't10', 'm24', 4): 20,
    ('r106', 't14', 'm25', 4): 14.8,
    ('r106', 't11', 'm24', 5): 18,
    ('r106', 't10', 'm24', 5): 20,
    ('r106', 't14', 'm25', 5): 14.8,
    ('r107', 't11', 'm9', 8): 25,
    ('r107', 't11', 'm9', 9): 25,
    ('r108', 't11', 'm15', 8): 25,
    ('r108', 't11', 'm15', 9): 25,
    ('r109', 't3', 'm0', 6): 140,
    ('r109', 't3', 'm0', 7): 140,
    ('r110', 't11', 'm26', 18): 20,
    ('r111', 't11', 'm2', 18): 17.5,
    ('r201', 't14', 'm4', 17): 11,
    ('r201', 't14', 'm4', 18): 11,
    ('r202', 't10', 'm17', 17): 5,
    ('r202', 't14', 'm18', 17): 11,
    ('r202', 't10', 'm17', 18): 5,
    ('r202', 't14', 'm18', 18): 11,
    ('r203','t11','m9', 20): 25,
    ('r203','t11','m9', 21): 25,
    ('r205','t11','m7',20): 9,
('r205','t10','m7',20): 11,
    ('r206','t10','m6',20): 8,
    ('r205','t11','m7',21): 9,
    ('r205','t10','m7',21): 11,
    ('r206','t10','m6',21): 8,
    ('r207','t11','m24',20): 18,
    ('r207','t10','m24',20): 20,
    ('r207','t14','m25',20): 14.8,
    ('r207','t11','m24',21): 18,
    ('r207','t10','m24',21): 20,
    ('r207','t14','m25',21): 14.8,
    ('r208','t11','m9',2): 25,
    ('r208','t11','m9',3): 25,
    ('r209','t11','m15',7): 25,
    ('r209','t11','m15',8): 25,
    ('r210','t11','m15',3): 25,
    ('r210','t11','m15',4): 25,
    ('r210','t11','m15',5): 25,
    ('r210','t11','m15',6): 25,
    ('r210','t11','m15',7): 25,
    ('r212','t3','m0',16): 140,
    ('r212','t3','m0',17): 140,
    ('r213','t11','m2',16): 23.1,
    ('r213','t11','m2',17): 23.1,
    ('r213','t11','m2',18): 23.1,
    ('r401','t10','m17',24): 5,
    ('r401','t14','m18',24): 11,
    ('r402','t7','m0',1): 300,
    ('r403','t11','m9',1): 25,
    ('r404','t11','m7',1): 14,
    ('r405','t10','m4',1): 14,
    ('r406','t11','m24',2): 18,
    ('r406','t10','m24',2): 20,
    ('r406','t14','m25',2): 14.8,
    ('r406','t11','m24',3): 18,
    ('r406','t10','m24',3): 20,
    ('r406', 't14', 'm25', 2): 14.8,
    ('r406', 't11', 'm24', 3): 18,
    ('r406', 't10', 'm24', 3): 20,
    ('r406', 't14', 'm25', 3): 14.8,
    ('r407', 't11', 'm15', 3): 25,
    ('r409', 't11', 'm15', 9): 25,
    ('r410', 't3', 'm0', 19): 140,
    ('r501', 't7', 'm0', 7): 300,
    ('r502', 't11', 'm9', 7): 160,
    ('r502', 't10', 'm9', 7): 203,
    ('r503', 't10', 'm17', 8): 5,
    ('r503', 't14', 'm18', 8): 11,
    ('r503', 't10', 'm17', 9): 5,
    ('r503', 't14', 'm18', 9): 11,
    ('r504', 't11', 'm27', 8): 22.5,
    ('r504', 't11', 'm27', 9): 22.5,
    ('r505', 't11', 'm7', 8): 14,
    ('r505', 't11', 'm7', 9): 14,
    ('r506', 't10', 'm4', 8): 14,
    ('r506', 't10', 'm4', 9): 14,
    ('r507', 't11', 'm24', 10): 18,
    ('r507', 't10', 'm24', 10): 20,
    ('r507', 't14', 'm25', 10): 14.8,
    ('r508', 't11', 'm27', 14): 22.5,
    ('r509', 't2', 'm0', 15): 110,
    ('r510', 't7', 'm0', 15): 300,
    ('r601', 't11', 'm27', 19): 24,
    ('r601', 't11', 'm27', 20): 24,
    ('r602', 't14', 'm4', 21): 11,
    ('r602', 't14', 'm4', 22): 11,
    ('r602', 't14', 'm4', 23): 11,
    ('r603', 't11', 'm9', 2): 160,
    ('r603', 't10', 'm9', 2): 203,
    ('r603', 't11', 'm9', 3): 160,
    ('r603', 't10', 'm9', 3): 203,
    ('r603', 't11', 'm9', 4): 160,
    ('r603', 't10', 'm9', 4): 203,
    ('r603', 't11', 'm9', 5): 160,
    ('r603', 't10', 'm9', 5): 203,
    ('r603', 't11', 'm9', 6): 160,
    ('r603', 't10', 'm9', 6): 203,
    ('r603', 't11', 'm9', 7): 160,
    ('r603', 't10', 'm9', 7): 203,
    ('r604', 't10', 'm17', 5): 5,
    ('r604', 't14', 'm18', 5): 11,
    ('r604', 't10', 'm17', 6): 5,
    ('r604', 't14', 'm18', 6): 11,
    ('r604', 't10', 'm17', 7): 5,
    ('r604', 't14', 'm18', 7): 11,
    ('r605', 't11', 'm27', 5): 22.5,
    ('r605', 't11', 'm27', 6): 22.5,
    ('r605', 't11', 'm27', 7): 22.5,
    ('r606', 't11', 'm7', 5): 14,
    ('r606', 't11', 'm7', 6): 14,
    ('r606', 't11', 'm7', 7): 14,
    ('r607', 't10', 'm4', 5): 14,
    ('r607', 't10', 'm4', 6): 14,
    ('r607', 't10', 'm4', 7): 14,
    ('r608', 't11', 'm24', 7): 18,
    ('r608', 't10', 'm24', 7): 20,
    ('r608', 't14', 'm25', 7): 14.8,
    ('r608', 't11', 'm24', 8): 18,
    ('r608', 't10', 'm24', 8): 20,
    ('r608', 't14', 'm25', 8): 14.8,
    ('r609', 't11', 'm15', 8): 25,
    ('r609', 't11', 'm15', 9): 25,
    ('r610', 't11', 'm27', 10): 22.5,
    ('r611', 't2', 'm0', 21): 110,
    ('r611', 't2', 'm0', 22): 110,
    ('r612', 't7', 'm0', 21): 300,
    ('r612', 't7', 'm0', 22): 300,
    ('r701', 't10', 'm17', 16): 5,
    ('r701', 't14', 'm18', 16): 11,
    ('r701', 't10', 'm17', 17): 5,
    ('r701', 't14', 'm18', 17): 11,
    ('r702', 't11', 'm27', 17): 22.5,
    ('r703', 't11', 'm7', 17): 9,
    ('r703', 't10', 'm7', 17): 11,
    ('r703', 't10', 'm6', 17): 8,
    ('r703', 't11', 'm7', 18): 9,
    ('r703', 't10', 'm7', 18): 11,
    ('r703', 't10', 'm6', 18): 8,
    ('r704', 't11', 'm24', 17): 18,
    ('r704', 't10', 'm24', 17): 20,
    ('r704', 't14', 'm25', 17): 14.8,
    ('r704', 't11', 'm24', 18): 18,
    ('r704', 't10', 'm24', 18): 20,
    ('r704', 't14', 'm25', 18): 14.8,
    ('r705', 't11', 'm15', 20): 25,
    ('r706', 't11', 'm27', 2): 22.5,
    ('r706', 't11', 'm27', 3): 22.5,
    ('r706', 't11', 'm27', 4): 22.5,
    ('r706', 't11', 'm27', 5): 22.5,
    ('r706', 't11', 'm27', 6): 22.5,
    ('r707', 't1', 'm0', 2): 400,
    ('r708', 't3', 'm0', 15): 140,
    ('r801', 't10', 'm17', 23): 5,
    ('r801', 't14', 'm18', 23): 11,
    ('r802', 't11', 'm27', 3): 22.5,
    ('r803', 't11', 'm7', 4): 9,
    ('r803', 't10', 'm7', 4): 11,
    ('r803', 't10', 'm6', 4): 8,
    ('r804', 't11', 'm24', 5): 18,
    ('r804', 't10', 'm24', 5): 20,
    ('r804', 't14', 'm25', 5): 14.8,
    ('r805', 't11', 'm15', 6): 25,
    ('r806', 't11', 'm27', 7): 22.5,
    ('r806', 't11', 'm27', 8): 22.5,
    ('r807', 't1', 'm0', 9): 400,
    ('r808', 't3', 'm0', 16): 140,
    ('r901', 't7', 'm0', 1): 300,
    ('r901', 't7', 'm0', 2): 300,
    ('r902', 't11', 'm27', 1): 22.5,
    ('r902', 't11', 'm27', 2): 22.5,
    ('r903', 't11', 'm31', 11): 11.3,
    ('r903', 't11', 'm31', 12): 11.3,
    ('r904', 't11', 'm26', 11): 20,
    ('r904', 't11', 'm26', 12): 20,
    ('r904', 't11', 'm26', 13): 20,
    ('r905', 't2', 'm0', 11): 110,
    ('r905', 't2', 'm0', 12): 110,
    ('r905', 't2', 'm0', 13): 110,
('r907', 't11', 'm27', 12): 22.5,
    ('r907', 't11', 'm27', 13): 22.5,
    ('r908', 't11', 'm31', 16): 11.3,
    ('r908', 't11', 'm31', 17): 11.3,
    ('r909', 't11', 'm31', 22): 11.3
     }
# Определение экзогеннных параметров
model.D = Param(model.t, within=NonNegativeIntegers, initialize=({1: 6, 2: 4, 3: 5, 4: 5, 5: 5, 6: 5, 7: 5, 8: 5, 9: 5, 10: 10, 11: 9, 12: 4, 13: 9, 14: 10, 15: 14, 16: 6, 17: 7, 18: 9, 19: 11, 20: 9, 21: 5, 22: 9, 23: 9, 24: 14}))  # Длительность t-го периода неизменных условий
model.T = Param(within=NonNegativeReals)  # Нормативная продолжительность рабочей смены
model.V = Param(model.i, within=NonNegativeReals,initialize=V)  # Общий объем механизированных работ вида
model.L = Param(model.j, within=NonNegativeIntegers,initialize=L)  # Количество наличных тракторов (комбайнов) марки j
model.R = Param(model.k, within=NonNegativeIntegers,initialize=R)  # Количество наличных сельхозмашин (орудий) марки k
model.p = Param(model.i, model.j, model.k,model.t, within=NonNegativeReals,initialize=p,default=0)  # Матрица производительности тракторных агрегатов

def u_init(model, i, j, k):
    return random.uniform(1, 20)

model.u = Param(model.i, model.j, model.k, within=NonNegativeReals, default=u_init)












# Определение правила целевой функции
def obj_rule(model):
    return sum(sum(sum(sum(
        (model.u[i, j, k] * model.x[i, j, k, t] * model.D[t])
        for i in model.i) for j in model.j) for k in model.k) for t in model.t)

# ограничения
def tractor_constraint_rule(model, j, t):
    return sum(model.x[i, j, k, t] for i in model.i for k in model.k) <= model.L[j]



def implement_constraint_rule(model, k, t):
    # Вычисляем сумму всех операций, в которых участвует сельхозмашина марки k в момент времени t
    return sum(model.x[i, j, k, t] for i in model.i for j in model.j) <= model.R[k]


def planwork_constraint_rule(model, i):
    expr = sum(model.x[i, j, k, t] * model.p[i, j, k, t] * model.D[t] for j in model.j for k in model.k for t in model.t)
    return (expr >= model.V[i])






model.planwork_constraint = Constraint(model.i,rule=planwork_constraint_rule)
model.implement_constraint = Constraint(model.k, model.t, rule=implement_constraint_rule)
model.tractor_constraint = Constraint(model.j, model.t, rule=tractor_constraint_rule)

# Добавление целевой функции в модель
model.obj = Objective(rule=obj_rule, sense=minimize)


results = solver.solve(model)

if (results.solver.status == SolverStatus.ok) and (
        results.solver.termination_condition == TerminationCondition.optimal):
    # оптимизация выполнена успешно
    with open('results.txt', 'w') as f:
        f.write("Оптимизация выполнена успешно!\n")
        f.write("Значения управляемого параметра x[i,j,k,t]:\n")
        print(f'Значение целевой функции: {value(model.obj)}')
        for i in model.i:
            for j in model.j:
                for k in model.k:
                    for t in model.t:
                        if model.x[i, j, k, t].value > 0:
                            f.write("x[{}, {}, {}, {}] = {}\n".format(i, j, k, t, model.x[i, j, k, t].value))
    # открыть файл и вывести содержимое на экран
    with open('results.txt', 'r') as f:
        print(f.read())
elif results.solver.termination_condition == TerminationCondition.infeasible:
    print("Решение не найдено из-за несовместности ограничений")
else:
    print("Solver terminated with condition", results.solver.termination_condition)



